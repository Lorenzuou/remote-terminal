# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from terminal_proto import remote_shell_pb2 as remote__shell__pb2


class RemoteShellStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.ConnectClient = channel.unary_stream(
        '/remote_shell.RemoteShell/ConnectClient',
        request_serializer=remote__shell__pb2.ClientInfo.SerializeToString,
        response_deserializer=remote__shell__pb2.Command.FromString,
        )
    self.SendCommandResult = channel.unary_unary(
        '/remote_shell.RemoteShell/SendCommandResult',
        request_serializer=remote__shell__pb2.CommandResult.SerializeToString,
        response_deserializer=remote__shell__pb2.CommandAck.FromString,
        )


class RemoteShellServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def ConnectClient(self, request, context):
    """Client initiates connection and maintains stream for receiving commands
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def SendCommandResult(self, request, context):
    """Client sends command results back to server
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_RemoteShellServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'ConnectClient': grpc.unary_stream_rpc_method_handler(
          servicer.ConnectClient,
          request_deserializer=remote__shell__pb2.ClientInfo.FromString,
          response_serializer=remote__shell__pb2.Command.SerializeToString,
      ),
      'SendCommandResult': grpc.unary_unary_rpc_method_handler(
          servicer.SendCommandResult,
          request_deserializer=remote__shell__pb2.CommandResult.FromString,
          response_serializer=remote__shell__pb2.CommandAck.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'remote_shell.RemoteShell', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
